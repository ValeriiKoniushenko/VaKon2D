digraph "CustomShaderProgram"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">CustomShaderProgram</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">struct CustomShaderProgram<BR ALIGN="LEFT"/>::Lightning lightning<BR ALIGN="LEFT"/></TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">CustomShaderProgram<BR ALIGN="LEFT"/>(const std::string &amp;name)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">CustomShaderProgram<BR ALIGN="LEFT"/>(const std::string &amp;name,<BR ALIGN="LEFT"/> bool shouldCreate)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">CustomShaderProgram<BR ALIGN="LEFT"/>(const std::string &amp;name,<BR ALIGN="LEFT"/> const std::filesystem::<BR ALIGN="LEFT"/>path &amp;pathToVertex, const<BR ALIGN="LEFT"/> std::filesystem::path &amp;pathToFragment)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">CustomShaderProgram<BR ALIGN="LEFT"/>(const std::string &amp;name,<BR ALIGN="LEFT"/> Shader &amp;frag, Shader &amp;vert)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void OnAfterLink()<BR ALIGN="LEFT"/> override<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool operator==(const<BR ALIGN="LEFT"/> CustomShaderProgram<BR ALIGN="LEFT"/> &amp;csp) const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">const std::string &amp;<BR ALIGN="LEFT"/> getName() const<BR ALIGN="LEFT"/></TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" ",arrowtail="onormal"];
  Node2 [id="Node000002",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">ShaderProgram</TD></TR>
<HR/>
<TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">&nbsp;</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">ShaderProgram(bool<BR ALIGN="LEFT"/> shouldCreate)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">ShaderProgram(Shader<BR ALIGN="LEFT"/> &amp;frag, Shader &amp;vert)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">ShaderProgram(ShaderProgram<BR ALIGN="LEFT"/> &amp;&amp;other) noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">ShaderProgram &amp; operator<BR ALIGN="LEFT"/>=(ShaderProgram &amp;&amp;other)<BR ALIGN="LEFT"/> noexcept<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void recreateAndLink<BR ALIGN="LEFT"/>(Shader &amp;frag, Shader<BR ALIGN="LEFT"/> &amp;vert)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void create()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void attachShader(Shader<BR ALIGN="LEFT"/> &amp;shader)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void link()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void use() const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool wasCreated() const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">GLuint data() const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool wasLinked() const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void deleteProgram()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual void OnAfterLink()<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">GLint getUniformLocation<BR ALIGN="LEFT"/>(const std::string &amp;name)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">bool isValid() const<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> const glm::ivec2 &amp;color)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> const glm::vec2 &amp;color)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> const GlColor &amp;color)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLfloat v0)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLfloat v0, GLfloat v1)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLfloat v0, GLfloat<BR ALIGN="LEFT"/> v1, GLfloat v2)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLfloat v0, GLfloat<BR ALIGN="LEFT"/> v1, GLfloat v2, GLfloat v3)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLint v0)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLint v0, GLint v1)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLint v0, GLint v1,<BR ALIGN="LEFT"/> GLint v2)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLint v0, GLint v1,<BR ALIGN="LEFT"/> GLint v2, GLint v3)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLuint v0)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLuint v0, GLuint v1)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLuint v0, GLuint v1,<BR ALIGN="LEFT"/> GLuint v2)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> GLuint v0, GLuint v1,<BR ALIGN="LEFT"/> GLuint v2, GLuint v3)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat2 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat3 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat4 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat2x3 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat3x2 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat2x4 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat4x2 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat3x4 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">void uniform(const<BR ALIGN="LEFT"/> std::string &amp;name,<BR ALIGN="LEFT"/> bool transpose, const<BR ALIGN="LEFT"/> glm::mat4x3 &amp;value)<BR ALIGN="LEFT"/></TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_shader_program.html",tooltip=" "];
  Node3 -> Node2 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" ",arrowtail="onormal"];
  Node3 [id="Node000003",shape=plain,label=<<TABLE CELLBORDER="0" BORDER="1"><TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">Utils::NotCopyableButMovable</TD></TR>
<HR/>
<TR><TD COLSPAN="2" CELLPADDING="1" CELLSPACING="0">&nbsp;</TD></TR>
<HR/>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">NotCopyableButMovable<BR ALIGN="LEFT"/>()=default<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">virtual ~NotCopyableButMovable<BR ALIGN="LEFT"/>()=default<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">NotCopyableButMovable<BR ALIGN="LEFT"/>(NotCopyableButMovable<BR ALIGN="LEFT"/> &amp;&amp;)=default<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">NotCopyableButMovable<BR ALIGN="LEFT"/> &amp; operator=(NotCopyableBut<BR ALIGN="LEFT"/>Movable &amp;&amp;)=default<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">NotCopyableButMovable<BR ALIGN="LEFT"/>(const NotCopyableButMovable<BR ALIGN="LEFT"/> &amp;)=delete<BR ALIGN="LEFT"/></TD></TR>
<TR><TD VALIGN="top" CELLPADDING="1" CELLSPACING="0">+</TD><TD VALIGN="top" ALIGN="LEFT" CELLPADDING="1" CELLSPACING="0">NotCopyableButMovable<BR ALIGN="LEFT"/> &amp; operator=(const NotCopyable<BR ALIGN="LEFT"/>ButMovable &amp;)=delete<BR ALIGN="LEFT"/></TD></TR>
</TABLE>>
,height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_utils_1_1_not_copyable_but_movable.html",tooltip=" "];
}
